// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// MCS protocol for communication between Chrome client and Mobile Connection
// Server .

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: mcs.proto

package checkin_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientEvent_Type int32

const (
	ClientEvent_UNKNOWN ClientEvent_Type = 0
	// Count of discarded events if the buffer filled up and was trimmed.
	ClientEvent_DISCARDED_EVENTS ClientEvent_Type = 1
	// Failed connection event: the connection failed to be established or we
	// had a login error.
	ClientEvent_FAILED_CONNECTION ClientEvent_Type = 2
	// Successful connection event: information about the last successful
	// connection, including the time at which it was established.
	ClientEvent_SUCCESSFUL_CONNECTION ClientEvent_Type = 3
)

// Enum value maps for ClientEvent_Type.
var (
	ClientEvent_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "DISCARDED_EVENTS",
		2: "FAILED_CONNECTION",
		3: "SUCCESSFUL_CONNECTION",
	}
	ClientEvent_Type_value = map[string]int32{
		"UNKNOWN":               0,
		"DISCARDED_EVENTS":      1,
		"FAILED_CONNECTION":     2,
		"SUCCESSFUL_CONNECTION": 3,
	}
)

func (x ClientEvent_Type) Enum() *ClientEvent_Type {
	p := new(ClientEvent_Type)
	*p = x
	return p
}

func (x ClientEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mcs_proto_enumTypes[0].Descriptor()
}

func (ClientEvent_Type) Type() protoreflect.EnumType {
	return &file_mcs_proto_enumTypes[0]
}

func (x ClientEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientEvent_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientEvent_Type(num)
	return nil
}

// Deprecated: Use ClientEvent_Type.Descriptor instead.
func (ClientEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{6, 0}
}

type LoginRequest_AuthService int32

const (
	LoginRequest_ANDROID_ID LoginRequest_AuthService = 2
)

// Enum value maps for LoginRequest_AuthService.
var (
	LoginRequest_AuthService_name = map[int32]string{
		2: "ANDROID_ID",
	}
	LoginRequest_AuthService_value = map[string]int32{
		"ANDROID_ID": 2,
	}
)

func (x LoginRequest_AuthService) Enum() *LoginRequest_AuthService {
	p := new(LoginRequest_AuthService)
	*p = x
	return p
}

func (x LoginRequest_AuthService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginRequest_AuthService) Descriptor() protoreflect.EnumDescriptor {
	return file_mcs_proto_enumTypes[1].Descriptor()
}

func (LoginRequest_AuthService) Type() protoreflect.EnumType {
	return &file_mcs_proto_enumTypes[1]
}

func (x LoginRequest_AuthService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LoginRequest_AuthService) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LoginRequest_AuthService(num)
	return nil
}

// Deprecated: Use LoginRequest_AuthService.Descriptor instead.
func (LoginRequest_AuthService) EnumDescriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{7, 0}
}

type IqStanza_IqType int32

const (
	IqStanza_GET      IqStanza_IqType = 0
	IqStanza_SET      IqStanza_IqType = 1
	IqStanza_RESULT   IqStanza_IqType = 2
	IqStanza_IQ_ERROR IqStanza_IqType = 3
)

// Enum value maps for IqStanza_IqType.
var (
	IqStanza_IqType_name = map[int32]string{
		0: "GET",
		1: "SET",
		2: "RESULT",
		3: "IQ_ERROR",
	}
	IqStanza_IqType_value = map[string]int32{
		"GET":      0,
		"SET":      1,
		"RESULT":   2,
		"IQ_ERROR": 3,
	}
)

func (x IqStanza_IqType) Enum() *IqStanza_IqType {
	p := new(IqStanza_IqType)
	*p = x
	return p
}

func (x IqStanza_IqType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IqStanza_IqType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcs_proto_enumTypes[2].Descriptor()
}

func (IqStanza_IqType) Type() protoreflect.EnumType {
	return &file_mcs_proto_enumTypes[2]
}

func (x IqStanza_IqType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IqStanza_IqType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IqStanza_IqType(num)
	return nil
}

// Deprecated: Use IqStanza_IqType.Descriptor instead.
func (IqStanza_IqType) EnumDescriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{12, 0}
}

// *
// TAG: 0
type HeartbeatPing struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	StreamId             *int32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32                 `protobuf:"varint,2,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	Status               *int64                 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HeartbeatPing) Reset() {
	*x = HeartbeatPing{}
	mi := &file_mcs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatPing) ProtoMessage() {}

func (x *HeartbeatPing) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatPing.ProtoReflect.Descriptor instead.
func (*HeartbeatPing) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{0}
}

func (x *HeartbeatPing) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *HeartbeatPing) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *HeartbeatPing) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

// *
// TAG: 1
type HeartbeatAck struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	StreamId             *int32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32                 `protobuf:"varint,2,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	Status               *int64                 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HeartbeatAck) Reset() {
	*x = HeartbeatAck{}
	mi := &file_mcs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatAck) ProtoMessage() {}

func (x *HeartbeatAck) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatAck.ProtoReflect.Descriptor instead.
func (*HeartbeatAck) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{1}
}

func (x *HeartbeatAck) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *HeartbeatAck) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *HeartbeatAck) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type ErrorInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          *int32                 `protobuf:"varint,1,req,name=code" json:"code,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Type          *string                `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Extension     *Extension             `protobuf:"bytes,4,opt,name=extension" json:"extension,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	mi := &file_mcs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorInfo) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ErrorInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ErrorInfo) GetExtension() *Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

type Setting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Setting) Reset() {
	*x = Setting{}
	mi := &file_mcs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{3}
}

func (x *Setting) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Setting) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type HeartbeatStat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *string                `protobuf:"bytes,1,req,name=ip" json:"ip,omitempty"`
	Timeout       *bool                  `protobuf:"varint,2,req,name=timeout" json:"timeout,omitempty"`
	IntervalMs    *int32                 `protobuf:"varint,3,req,name=interval_ms,json=intervalMs" json:"interval_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatStat) Reset() {
	*x = HeartbeatStat{}
	mi := &file_mcs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatStat) ProtoMessage() {}

func (x *HeartbeatStat) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatStat.ProtoReflect.Descriptor instead.
func (*HeartbeatStat) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{4}
}

func (x *HeartbeatStat) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *HeartbeatStat) GetTimeout() bool {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return false
}

func (x *HeartbeatStat) GetIntervalMs() int32 {
	if x != nil && x.IntervalMs != nil {
		return *x.IntervalMs
	}
	return 0
}

type HeartbeatConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadStat    *bool                  `protobuf:"varint,1,opt,name=upload_stat,json=uploadStat" json:"upload_stat,omitempty"`
	Ip            *string                `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	IntervalMs    *int32                 `protobuf:"varint,3,opt,name=interval_ms,json=intervalMs" json:"interval_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatConfig) Reset() {
	*x = HeartbeatConfig{}
	mi := &file_mcs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatConfig) ProtoMessage() {}

func (x *HeartbeatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatConfig.ProtoReflect.Descriptor instead.
func (*HeartbeatConfig) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{5}
}

func (x *HeartbeatConfig) GetUploadStat() bool {
	if x != nil && x.UploadStat != nil {
		return *x.UploadStat
	}
	return false
}

func (x *HeartbeatConfig) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *HeartbeatConfig) GetIntervalMs() int32 {
	if x != nil && x.IntervalMs != nil {
		return *x.IntervalMs
	}
	return 0
}

// ClientEvents are used to inform the server of failed and successful
// connections.
type ClientEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Common fields [1-99]
	Type *ClientEvent_Type `protobuf:"varint,1,opt,name=type,enum=mcs_proto.ClientEvent_Type" json:"type,omitempty"`
	// Fields for DISCARDED_EVENTS messages [100-199]
	NumberDiscardedEvents *uint32 `protobuf:"varint,100,opt,name=number_discarded_events,json=numberDiscardedEvents" json:"number_discarded_events,omitempty"`
	// Fields for FAILED_CONNECTION and SUCCESSFUL_CONNECTION messages [200-299]
	// Network type is a value in net::NetworkChangeNotifier::ConnectionType.
	NetworkType             *int32  `protobuf:"varint,200,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	TimeConnectionStartedMs *uint64 `protobuf:"varint,202,opt,name=time_connection_started_ms,json=timeConnectionStartedMs" json:"time_connection_started_ms,omitempty"`
	TimeConnectionEndedMs   *uint64 `protobuf:"varint,203,opt,name=time_connection_ended_ms,json=timeConnectionEndedMs" json:"time_connection_ended_ms,omitempty"`
	// Error code should be a net::Error value.
	ErrorCode *int32 `protobuf:"varint,204,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// Fields for SUCCESSFUL_CONNECTION messages [300-399]
	TimeConnectionEstablishedMs *uint64 `protobuf:"varint,300,opt,name=time_connection_established_ms,json=timeConnectionEstablishedMs" json:"time_connection_established_ms,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *ClientEvent) Reset() {
	*x = ClientEvent{}
	mi := &file_mcs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEvent) ProtoMessage() {}

func (x *ClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEvent.ProtoReflect.Descriptor instead.
func (*ClientEvent) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{6}
}

func (x *ClientEvent) GetType() ClientEvent_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ClientEvent_UNKNOWN
}

func (x *ClientEvent) GetNumberDiscardedEvents() uint32 {
	if x != nil && x.NumberDiscardedEvents != nil {
		return *x.NumberDiscardedEvents
	}
	return 0
}

func (x *ClientEvent) GetNetworkType() int32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *ClientEvent) GetTimeConnectionStartedMs() uint64 {
	if x != nil && x.TimeConnectionStartedMs != nil {
		return *x.TimeConnectionStartedMs
	}
	return 0
}

func (x *ClientEvent) GetTimeConnectionEndedMs() uint64 {
	if x != nil && x.TimeConnectionEndedMs != nil {
		return *x.TimeConnectionEndedMs
	}
	return 0
}

func (x *ClientEvent) GetErrorCode() int32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *ClientEvent) GetTimeConnectionEstablishedMs() uint64 {
	if x != nil && x.TimeConnectionEstablishedMs != nil {
		return *x.TimeConnectionEstablishedMs
	}
	return 0
}

// *
// TAG: 2
type LoginRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *string                `protobuf:"bytes,1,req,name=id" json:"id,omitempty"` // Must be present ( proto required ), may be empty
	// string.
	// mcs.android.com.
	Domain *string `protobuf:"bytes,2,req,name=domain" json:"domain,omitempty"`
	// Decimal android ID
	User     *string `protobuf:"bytes,3,req,name=user" json:"user,omitempty"`
	Resource *string `protobuf:"bytes,4,req,name=resource" json:"resource,omitempty"`
	// Secret
	AuthToken *string `protobuf:"bytes,5,req,name=auth_token,json=authToken" json:"auth_token,omitempty"`
	// Format is: android-HEX_DEVICE_ID
	// The user is the decimal value.
	DeviceId *string `protobuf:"bytes,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// RMQ1 - no longer used
	LastRmqId *int64     `protobuf:"varint,7,opt,name=last_rmq_id,json=lastRmqId" json:"last_rmq_id,omitempty"`
	Setting   []*Setting `protobuf:"bytes,8,rep,name=setting" json:"setting,omitempty"`
	// optional int32 compress = 9;
	ReceivedPersistentId []string       `protobuf:"bytes,10,rep,name=received_persistent_id,json=receivedPersistentId" json:"received_persistent_id,omitempty"`
	AdaptiveHeartbeat    *bool          `protobuf:"varint,12,opt,name=adaptive_heartbeat,json=adaptiveHeartbeat" json:"adaptive_heartbeat,omitempty"`
	HeartbeatStat        *HeartbeatStat `protobuf:"bytes,13,opt,name=heartbeat_stat,json=heartbeatStat" json:"heartbeat_stat,omitempty"`
	// Must be true.
	UseRmq2   *bool  `protobuf:"varint,14,opt,name=use_rmq2,json=useRmq2" json:"use_rmq2,omitempty"`
	AccountId *int64 `protobuf:"varint,15,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// ANDROID_ID = 2
	AuthService *LoginRequest_AuthService `protobuf:"varint,16,opt,name=auth_service,json=authService,enum=mcs_proto.LoginRequest_AuthService" json:"auth_service,omitempty"`
	NetworkType *int32                    `protobuf:"varint,17,opt,name=network_type,json=networkType" json:"network_type,omitempty"`
	Status      *int64                    `protobuf:"varint,18,opt,name=status" json:"status,omitempty"`
	// Events recorded on the client after the last successful connection.
	ClientEvent   []*ClientEvent `protobuf:"bytes,22,rep,name=client_event,json=clientEvent" json:"client_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_mcs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{7}
}

func (x *LoginRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LoginRequest) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *LoginRequest) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *LoginRequest) GetResource() string {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ""
}

func (x *LoginRequest) GetAuthToken() string {
	if x != nil && x.AuthToken != nil {
		return *x.AuthToken
	}
	return ""
}

func (x *LoginRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *LoginRequest) GetLastRmqId() int64 {
	if x != nil && x.LastRmqId != nil {
		return *x.LastRmqId
	}
	return 0
}

func (x *LoginRequest) GetSetting() []*Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *LoginRequest) GetReceivedPersistentId() []string {
	if x != nil {
		return x.ReceivedPersistentId
	}
	return nil
}

func (x *LoginRequest) GetAdaptiveHeartbeat() bool {
	if x != nil && x.AdaptiveHeartbeat != nil {
		return *x.AdaptiveHeartbeat
	}
	return false
}

func (x *LoginRequest) GetHeartbeatStat() *HeartbeatStat {
	if x != nil {
		return x.HeartbeatStat
	}
	return nil
}

func (x *LoginRequest) GetUseRmq2() bool {
	if x != nil && x.UseRmq2 != nil {
		return *x.UseRmq2
	}
	return false
}

func (x *LoginRequest) GetAccountId() int64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *LoginRequest) GetAuthService() LoginRequest_AuthService {
	if x != nil && x.AuthService != nil {
		return *x.AuthService
	}
	return LoginRequest_ANDROID_ID
}

func (x *LoginRequest) GetNetworkType() int32 {
	if x != nil && x.NetworkType != nil {
		return *x.NetworkType
	}
	return 0
}

func (x *LoginRequest) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *LoginRequest) GetClientEvent() []*ClientEvent {
	if x != nil {
		return x.ClientEvent
	}
	return nil
}

// *
// TAG: 3
type LoginResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *string                `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Not used.
	Jid *string `protobuf:"bytes,2,opt,name=jid" json:"jid,omitempty"`
	// Null if login was ok.
	Error    *ErrorInfo `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Setting  []*Setting `protobuf:"bytes,4,rep,name=setting" json:"setting,omitempty"`
	StreamId *int32     `protobuf:"varint,5,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// Should be "1"
	LastStreamIdReceived *int32           `protobuf:"varint,6,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	HeartbeatConfig      *HeartbeatConfig `protobuf:"bytes,7,opt,name=heartbeat_config,json=heartbeatConfig" json:"heartbeat_config,omitempty"`
	// used by the client to synchronize with the server timestamp.
	ServerTimestamp *int64 `protobuf:"varint,8,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_mcs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{8}
}

func (x *LoginResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *LoginResponse) GetJid() string {
	if x != nil && x.Jid != nil {
		return *x.Jid
	}
	return ""
}

func (x *LoginResponse) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *LoginResponse) GetSetting() []*Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *LoginResponse) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *LoginResponse) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *LoginResponse) GetHeartbeatConfig() *HeartbeatConfig {
	if x != nil {
		return x.HeartbeatConfig
	}
	return nil
}

func (x *LoginResponse) GetServerTimestamp() int64 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

type StreamErrorStanza struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Text          *string                `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamErrorStanza) Reset() {
	*x = StreamErrorStanza{}
	mi := &file_mcs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamErrorStanza) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamErrorStanza) ProtoMessage() {}

func (x *StreamErrorStanza) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamErrorStanza.ProtoReflect.Descriptor instead.
func (*StreamErrorStanza) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{9}
}

func (x *StreamErrorStanza) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *StreamErrorStanza) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// *
// TAG: 4
type Close struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Close) Reset() {
	*x = Close{}
	mi := &file_mcs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Close) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Close) ProtoMessage() {}

func (x *Close) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Close.ProtoReflect.Descriptor instead.
func (*Close) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{10}
}

type Extension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 12: SelectiveAck
	// 13: StreamAck
	Id            *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Data          []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Extension) Reset() {
	*x = Extension{}
	mi := &file_mcs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{11}
}

func (x *Extension) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Extension) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// *
// TAG: 7
// IqRequest must contain a single extension.  IqResponse may contain 0 or 1
// extensions.
type IqStanza struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	RmqId *int64                 `protobuf:"varint,1,opt,name=rmq_id,json=rmqId" json:"rmq_id,omitempty"`
	Type  *IqStanza_IqType       `protobuf:"varint,2,req,name=type,enum=mcs_proto.IqStanza_IqType" json:"type,omitempty"`
	Id    *string                `protobuf:"bytes,3,req,name=id" json:"id,omitempty"`
	From  *string                `protobuf:"bytes,4,opt,name=from" json:"from,omitempty"`
	To    *string                `protobuf:"bytes,5,opt,name=to" json:"to,omitempty"`
	Error *ErrorInfo             `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	// Only field used in the 38+ protocol (besides common last_stream_id_received, status, rmq_id)
	Extension            *Extension `protobuf:"bytes,7,opt,name=extension" json:"extension,omitempty"`
	PersistentId         *string    `protobuf:"bytes,8,opt,name=persistent_id,json=persistentId" json:"persistent_id,omitempty"`
	StreamId             *int32     `protobuf:"varint,9,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32     `protobuf:"varint,10,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	AccountId            *int64     `protobuf:"varint,11,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Status               *int64     `protobuf:"varint,12,opt,name=status" json:"status,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *IqStanza) Reset() {
	*x = IqStanza{}
	mi := &file_mcs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IqStanza) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IqStanza) ProtoMessage() {}

func (x *IqStanza) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IqStanza.ProtoReflect.Descriptor instead.
func (*IqStanza) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{12}
}

func (x *IqStanza) GetRmqId() int64 {
	if x != nil && x.RmqId != nil {
		return *x.RmqId
	}
	return 0
}

func (x *IqStanza) GetType() IqStanza_IqType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return IqStanza_GET
}

func (x *IqStanza) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *IqStanza) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *IqStanza) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *IqStanza) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IqStanza) GetExtension() *Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *IqStanza) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

func (x *IqStanza) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *IqStanza) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *IqStanza) GetAccountId() int64 {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return 0
}

func (x *IqStanza) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type AppData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppData) Reset() {
	*x = AppData{}
	mi := &file_mcs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppData) ProtoMessage() {}

func (x *AppData) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppData.ProtoReflect.Descriptor instead.
func (*AppData) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{13}
}

func (x *AppData) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *AppData) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// TAG: 8
type DataMessageStanza struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the message ID, set by client, DMP.9 (message_id)
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Project ID of the sender, DMP.1
	From *string `protobuf:"bytes,3,req,name=from" json:"from,omitempty"`
	// Part of DMRequest - also the key in DataMessageProto.
	To *string `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	// Package name. DMP.2
	Category *string `protobuf:"bytes,5,req,name=category" json:"category,omitempty"`
	// The collapsed key, DMP.3
	Token *string `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	// User data + GOOGLE. prefixed special entries, DMP.4
	AppData []*AppData `protobuf:"bytes,7,rep,name=app_data,json=appData" json:"app_data,omitempty"`
	// Not used.
	FromTrustedServer *bool `protobuf:"varint,8,opt,name=from_trusted_server,json=fromTrustedServer" json:"from_trusted_server,omitempty"`
	// Part of the ACK protocol, returned in DataMessageResponse on server side.
	// It's part of the key of DMP.
	PersistentId *string `protobuf:"bytes,9,opt,name=persistent_id,json=persistentId" json:"persistent_id,omitempty"`
	// In-stream ack. Increments on each message sent - a bit redundant
	// Not used in DMP/DMR.
	StreamId             *int32 `protobuf:"varint,10,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	LastStreamIdReceived *int32 `protobuf:"varint,11,opt,name=last_stream_id_received,json=lastStreamIdReceived" json:"last_stream_id_received,omitempty"`
	// Sent by the device shortly after registration.
	RegId *string `protobuf:"bytes,13,opt,name=reg_id,json=regId" json:"reg_id,omitempty"`
	// serial number of the target user, DMP.8
	// It is the 'serial number' according to user manager.
	DeviceUserId *int64 `protobuf:"varint,16,opt,name=device_user_id,json=deviceUserId" json:"device_user_id,omitempty"`
	// Time to live, in seconds.
	Ttl *int32 `protobuf:"varint,17,opt,name=ttl" json:"ttl,omitempty"`
	// Timestamp ( according to client ) when message was sent by app, in seconds
	Sent *int64 `protobuf:"varint,18,opt,name=sent" json:"sent,omitempty"`
	// How long has the message been queued before the flush, in seconds.
	// This is needed to account for the time difference between server and
	// client: server should adjust 'sent' based on its 'receive' time.
	Queued *int32 `protobuf:"varint,19,opt,name=queued" json:"queued,omitempty"`
	Status *int64 `protobuf:"varint,20,opt,name=status" json:"status,omitempty"`
	// Optional field containing the binary payload of the message.
	RawData []byte `protobuf:"bytes,21,opt,name=raw_data,json=rawData" json:"raw_data,omitempty"`
	// If set the server requests immediate ack. Used for important messages and
	// for testing.
	ImmediateAck  *bool `protobuf:"varint,24,opt,name=immediate_ack,json=immediateAck" json:"immediate_ack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataMessageStanza) Reset() {
	*x = DataMessageStanza{}
	mi := &file_mcs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataMessageStanza) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMessageStanza) ProtoMessage() {}

func (x *DataMessageStanza) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMessageStanza.ProtoReflect.Descriptor instead.
func (*DataMessageStanza) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{14}
}

func (x *DataMessageStanza) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DataMessageStanza) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *DataMessageStanza) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

func (x *DataMessageStanza) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *DataMessageStanza) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *DataMessageStanza) GetAppData() []*AppData {
	if x != nil {
		return x.AppData
	}
	return nil
}

func (x *DataMessageStanza) GetFromTrustedServer() bool {
	if x != nil && x.FromTrustedServer != nil {
		return *x.FromTrustedServer
	}
	return false
}

func (x *DataMessageStanza) GetPersistentId() string {
	if x != nil && x.PersistentId != nil {
		return *x.PersistentId
	}
	return ""
}

func (x *DataMessageStanza) GetStreamId() int32 {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return 0
}

func (x *DataMessageStanza) GetLastStreamIdReceived() int32 {
	if x != nil && x.LastStreamIdReceived != nil {
		return *x.LastStreamIdReceived
	}
	return 0
}

func (x *DataMessageStanza) GetRegId() string {
	if x != nil && x.RegId != nil {
		return *x.RegId
	}
	return ""
}

func (x *DataMessageStanza) GetDeviceUserId() int64 {
	if x != nil && x.DeviceUserId != nil {
		return *x.DeviceUserId
	}
	return 0
}

func (x *DataMessageStanza) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *DataMessageStanza) GetSent() int64 {
	if x != nil && x.Sent != nil {
		return *x.Sent
	}
	return 0
}

func (x *DataMessageStanza) GetQueued() int32 {
	if x != nil && x.Queued != nil {
		return *x.Queued
	}
	return 0
}

func (x *DataMessageStanza) GetStatus() int64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *DataMessageStanza) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *DataMessageStanza) GetImmediateAck() bool {
	if x != nil && x.ImmediateAck != nil {
		return *x.ImmediateAck
	}
	return false
}

// *
// Included in IQ with ID 13, sent from client or server after 10 unconfirmed
// messages.
type StreamAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamAck) Reset() {
	*x = StreamAck{}
	mi := &file_mcs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAck) ProtoMessage() {}

func (x *StreamAck) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAck.ProtoReflect.Descriptor instead.
func (*StreamAck) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{15}
}

// *
// Included in IQ sent after LoginResponse from server with ID 12.
type SelectiveAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []string               `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectiveAck) Reset() {
	*x = SelectiveAck{}
	mi := &file_mcs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectiveAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectiveAck) ProtoMessage() {}

func (x *SelectiveAck) ProtoReflect() protoreflect.Message {
	mi := &file_mcs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectiveAck.ProtoReflect.Descriptor instead.
func (*SelectiveAck) Descriptor() ([]byte, []int) {
	return file_mcs_proto_rawDescGZIP(), []int{16}
}

func (x *SelectiveAck) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

var File_mcs_proto protoreflect.FileDescriptor

const file_mcs_proto_rawDesc = "" +
	"\n" +
	"\tmcs.proto\x12\tmcs_proto\"{\n" +
	"\rHeartbeatPing\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x05R\bstreamId\x125\n" +
	"\x17last_stream_id_received\x18\x02 \x01(\x05R\x14lastStreamIdReceived\x12\x16\n" +
	"\x06status\x18\x03 \x01(\x03R\x06status\"z\n" +
	"\fHeartbeatAck\x12\x1b\n" +
	"\tstream_id\x18\x01 \x01(\x05R\bstreamId\x125\n" +
	"\x17last_stream_id_received\x18\x02 \x01(\x05R\x14lastStreamIdReceived\x12\x16\n" +
	"\x06status\x18\x03 \x01(\x03R\x06status\"\x81\x01\n" +
	"\tErrorInfo\x12\x12\n" +
	"\x04code\x18\x01 \x02(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x122\n" +
	"\textension\x18\x04 \x01(\v2\x14.mcs_proto.ExtensionR\textension\"3\n" +
	"\aSetting\x12\x12\n" +
	"\x04name\x18\x01 \x02(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x02(\tR\x05value\"Z\n" +
	"\rHeartbeatStat\x12\x0e\n" +
	"\x02ip\x18\x01 \x02(\tR\x02ip\x12\x18\n" +
	"\atimeout\x18\x02 \x02(\bR\atimeout\x12\x1f\n" +
	"\vinterval_ms\x18\x03 \x02(\x05R\n" +
	"intervalMs\"c\n" +
	"\x0fHeartbeatConfig\x12\x1f\n" +
	"\vupload_stat\x18\x01 \x01(\bR\n" +
	"uploadStat\x12\x0e\n" +
	"\x02ip\x18\x02 \x01(\tR\x02ip\x12\x1f\n" +
	"\vinterval_ms\x18\x03 \x01(\x05R\n" +
	"intervalMs\"\xdd\x03\n" +
	"\vClientEvent\x12/\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1b.mcs_proto.ClientEvent.TypeR\x04type\x126\n" +
	"\x17number_discarded_events\x18d \x01(\rR\x15numberDiscardedEvents\x12\"\n" +
	"\fnetwork_type\x18\xc8\x01 \x01(\x05R\vnetworkType\x12<\n" +
	"\x1atime_connection_started_ms\x18\xca\x01 \x01(\x04R\x17timeConnectionStartedMs\x128\n" +
	"\x18time_connection_ended_ms\x18\xcb\x01 \x01(\x04R\x15timeConnectionEndedMs\x12\x1e\n" +
	"\n" +
	"error_code\x18\xcc\x01 \x01(\x05R\terrorCode\x12D\n" +
	"\x1etime_connection_established_ms\x18\xac\x02 \x01(\x04R\x1btimeConnectionEstablishedMs\"[\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x14\n" +
	"\x10DISCARDED_EVENTS\x10\x01\x12\x15\n" +
	"\x11FAILED_CONNECTION\x10\x02\x12\x19\n" +
	"\x15SUCCESSFUL_CONNECTION\x10\x03J\x06\b\xc9\x01\x10\xca\x01\"\xbf\x05\n" +
	"\fLoginRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\tR\x02id\x12\x16\n" +
	"\x06domain\x18\x02 \x02(\tR\x06domain\x12\x12\n" +
	"\x04user\x18\x03 \x02(\tR\x04user\x12\x1a\n" +
	"\bresource\x18\x04 \x02(\tR\bresource\x12\x1d\n" +
	"\n" +
	"auth_token\x18\x05 \x02(\tR\tauthToken\x12\x1b\n" +
	"\tdevice_id\x18\x06 \x01(\tR\bdeviceId\x12\x1e\n" +
	"\vlast_rmq_id\x18\a \x01(\x03R\tlastRmqId\x12,\n" +
	"\asetting\x18\b \x03(\v2\x12.mcs_proto.SettingR\asetting\x124\n" +
	"\x16received_persistent_id\x18\n" +
	" \x03(\tR\x14receivedPersistentId\x12-\n" +
	"\x12adaptive_heartbeat\x18\f \x01(\bR\x11adaptiveHeartbeat\x12?\n" +
	"\x0eheartbeat_stat\x18\r \x01(\v2\x18.mcs_proto.HeartbeatStatR\rheartbeatStat\x12\x19\n" +
	"\buse_rmq2\x18\x0e \x01(\bR\auseRmq2\x12\x1d\n" +
	"\n" +
	"account_id\x18\x0f \x01(\x03R\taccountId\x12F\n" +
	"\fauth_service\x18\x10 \x01(\x0e2#.mcs_proto.LoginRequest.AuthServiceR\vauthService\x12!\n" +
	"\fnetwork_type\x18\x11 \x01(\x05R\vnetworkType\x12\x16\n" +
	"\x06status\x18\x12 \x01(\x03R\x06status\x129\n" +
	"\fclient_event\x18\x16 \x03(\v2\x16.mcs_proto.ClientEventR\vclientEvent\"\x1d\n" +
	"\vAuthService\x12\x0e\n" +
	"\n" +
	"ANDROID_ID\x10\x02J\x04\b\x13\x10\x14J\x04\b\x14\x10\x15J\x04\b\x15\x10\x16\"\xd1\x02\n" +
	"\rLoginResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\tR\x02id\x12\x10\n" +
	"\x03jid\x18\x02 \x01(\tR\x03jid\x12*\n" +
	"\x05error\x18\x03 \x01(\v2\x14.mcs_proto.ErrorInfoR\x05error\x12,\n" +
	"\asetting\x18\x04 \x03(\v2\x12.mcs_proto.SettingR\asetting\x12\x1b\n" +
	"\tstream_id\x18\x05 \x01(\x05R\bstreamId\x125\n" +
	"\x17last_stream_id_received\x18\x06 \x01(\x05R\x14lastStreamIdReceived\x12E\n" +
	"\x10heartbeat_config\x18\a \x01(\v2\x1a.mcs_proto.HeartbeatConfigR\x0fheartbeatConfig\x12)\n" +
	"\x10server_timestamp\x18\b \x01(\x03R\x0fserverTimestamp\";\n" +
	"\x11StreamErrorStanza\x12\x12\n" +
	"\x04type\x18\x01 \x02(\tR\x04type\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\"\a\n" +
	"\x05Close\"/\n" +
	"\tExtension\x12\x0e\n" +
	"\x02id\x18\x01 \x02(\x05R\x02id\x12\x12\n" +
	"\x04data\x18\x02 \x02(\fR\x04data\"\xcb\x03\n" +
	"\bIqStanza\x12\x15\n" +
	"\x06rmq_id\x18\x01 \x01(\x03R\x05rmqId\x12.\n" +
	"\x04type\x18\x02 \x02(\x0e2\x1a.mcs_proto.IqStanza.IqTypeR\x04type\x12\x0e\n" +
	"\x02id\x18\x03 \x02(\tR\x02id\x12\x12\n" +
	"\x04from\x18\x04 \x01(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x05 \x01(\tR\x02to\x12*\n" +
	"\x05error\x18\x06 \x01(\v2\x14.mcs_proto.ErrorInfoR\x05error\x122\n" +
	"\textension\x18\a \x01(\v2\x14.mcs_proto.ExtensionR\textension\x12#\n" +
	"\rpersistent_id\x18\b \x01(\tR\fpersistentId\x12\x1b\n" +
	"\tstream_id\x18\t \x01(\x05R\bstreamId\x125\n" +
	"\x17last_stream_id_received\x18\n" +
	" \x01(\x05R\x14lastStreamIdReceived\x12\x1d\n" +
	"\n" +
	"account_id\x18\v \x01(\x03R\taccountId\x12\x16\n" +
	"\x06status\x18\f \x01(\x03R\x06status\"4\n" +
	"\x06IqType\x12\a\n" +
	"\x03GET\x10\x00\x12\a\n" +
	"\x03SET\x10\x01\x12\n" +
	"\n" +
	"\x06RESULT\x10\x02\x12\f\n" +
	"\bIQ_ERROR\x10\x03\"1\n" +
	"\aAppData\x12\x10\n" +
	"\x03key\x18\x01 \x02(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x02(\tR\x05value\"\xa4\x04\n" +
	"\x11DataMessageStanza\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x12\n" +
	"\x04from\x18\x03 \x02(\tR\x04from\x12\x0e\n" +
	"\x02to\x18\x04 \x01(\tR\x02to\x12\x1a\n" +
	"\bcategory\x18\x05 \x02(\tR\bcategory\x12\x14\n" +
	"\x05token\x18\x06 \x01(\tR\x05token\x12-\n" +
	"\bapp_data\x18\a \x03(\v2\x12.mcs_proto.AppDataR\aappData\x12.\n" +
	"\x13from_trusted_server\x18\b \x01(\bR\x11fromTrustedServer\x12#\n" +
	"\rpersistent_id\x18\t \x01(\tR\fpersistentId\x12\x1b\n" +
	"\tstream_id\x18\n" +
	" \x01(\x05R\bstreamId\x125\n" +
	"\x17last_stream_id_received\x18\v \x01(\x05R\x14lastStreamIdReceived\x12\x15\n" +
	"\x06reg_id\x18\r \x01(\tR\x05regId\x12$\n" +
	"\x0edevice_user_id\x18\x10 \x01(\x03R\fdeviceUserId\x12\x10\n" +
	"\x03ttl\x18\x11 \x01(\x05R\x03ttl\x12\x12\n" +
	"\x04sent\x18\x12 \x01(\x03R\x04sent\x12\x16\n" +
	"\x06queued\x18\x13 \x01(\x05R\x06queued\x12\x16\n" +
	"\x06status\x18\x14 \x01(\x03R\x06status\x12\x19\n" +
	"\braw_data\x18\x15 \x01(\fR\arawData\x12#\n" +
	"\rimmediate_ack\x18\x18 \x01(\bR\fimmediateAck\"\v\n" +
	"\tStreamAck\"\x1e\n" +
	"\fSelectiveAck\x12\x0e\n" +
	"\x02id\x18\x01 \x03(\tR\x02idB\x13H\x03Z\x0f.;checkin_proto"

var (
	file_mcs_proto_rawDescOnce sync.Once
	file_mcs_proto_rawDescData []byte
)

func file_mcs_proto_rawDescGZIP() []byte {
	file_mcs_proto_rawDescOnce.Do(func() {
		file_mcs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mcs_proto_rawDesc), len(file_mcs_proto_rawDesc)))
	})
	return file_mcs_proto_rawDescData
}

var file_mcs_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mcs_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_mcs_proto_goTypes = []any{
	(ClientEvent_Type)(0),         // 0: mcs_proto.ClientEvent.Type
	(LoginRequest_AuthService)(0), // 1: mcs_proto.LoginRequest.AuthService
	(IqStanza_IqType)(0),          // 2: mcs_proto.IqStanza.IqType
	(*HeartbeatPing)(nil),         // 3: mcs_proto.HeartbeatPing
	(*HeartbeatAck)(nil),          // 4: mcs_proto.HeartbeatAck
	(*ErrorInfo)(nil),             // 5: mcs_proto.ErrorInfo
	(*Setting)(nil),               // 6: mcs_proto.Setting
	(*HeartbeatStat)(nil),         // 7: mcs_proto.HeartbeatStat
	(*HeartbeatConfig)(nil),       // 8: mcs_proto.HeartbeatConfig
	(*ClientEvent)(nil),           // 9: mcs_proto.ClientEvent
	(*LoginRequest)(nil),          // 10: mcs_proto.LoginRequest
	(*LoginResponse)(nil),         // 11: mcs_proto.LoginResponse
	(*StreamErrorStanza)(nil),     // 12: mcs_proto.StreamErrorStanza
	(*Close)(nil),                 // 13: mcs_proto.Close
	(*Extension)(nil),             // 14: mcs_proto.Extension
	(*IqStanza)(nil),              // 15: mcs_proto.IqStanza
	(*AppData)(nil),               // 16: mcs_proto.AppData
	(*DataMessageStanza)(nil),     // 17: mcs_proto.DataMessageStanza
	(*StreamAck)(nil),             // 18: mcs_proto.StreamAck
	(*SelectiveAck)(nil),          // 19: mcs_proto.SelectiveAck
}
var file_mcs_proto_depIdxs = []int32{
	14, // 0: mcs_proto.ErrorInfo.extension:type_name -> mcs_proto.Extension
	0,  // 1: mcs_proto.ClientEvent.type:type_name -> mcs_proto.ClientEvent.Type
	6,  // 2: mcs_proto.LoginRequest.setting:type_name -> mcs_proto.Setting
	7,  // 3: mcs_proto.LoginRequest.heartbeat_stat:type_name -> mcs_proto.HeartbeatStat
	1,  // 4: mcs_proto.LoginRequest.auth_service:type_name -> mcs_proto.LoginRequest.AuthService
	9,  // 5: mcs_proto.LoginRequest.client_event:type_name -> mcs_proto.ClientEvent
	5,  // 6: mcs_proto.LoginResponse.error:type_name -> mcs_proto.ErrorInfo
	6,  // 7: mcs_proto.LoginResponse.setting:type_name -> mcs_proto.Setting
	8,  // 8: mcs_proto.LoginResponse.heartbeat_config:type_name -> mcs_proto.HeartbeatConfig
	2,  // 9: mcs_proto.IqStanza.type:type_name -> mcs_proto.IqStanza.IqType
	5,  // 10: mcs_proto.IqStanza.error:type_name -> mcs_proto.ErrorInfo
	14, // 11: mcs_proto.IqStanza.extension:type_name -> mcs_proto.Extension
	16, // 12: mcs_proto.DataMessageStanza.app_data:type_name -> mcs_proto.AppData
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_mcs_proto_init() }
func file_mcs_proto_init() {
	if File_mcs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mcs_proto_rawDesc), len(file_mcs_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcs_proto_goTypes,
		DependencyIndexes: file_mcs_proto_depIdxs,
		EnumInfos:         file_mcs_proto_enumTypes,
		MessageInfos:      file_mcs_proto_msgTypes,
	}.Build()
	File_mcs_proto = out.File
	file_mcs_proto_goTypes = nil
	file_mcs_proto_depIdxs = nil
}
